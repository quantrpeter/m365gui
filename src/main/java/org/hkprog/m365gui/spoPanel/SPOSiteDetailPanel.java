package org.hkprog.m365gui.spoPanel;

import com.mxgraph.view.mxGraph;
import hk.quantr.javalib.CommonLib;
import java.net.URI;
import org.hkprog.m365gui.MainFrame;
import org.hkprog.m365gui.MyLib;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.SwingWorker;
import org.hkprog.m365gui.spoPanel.mxGraph.MyGraphComponent;

/**
 *
 * @author Peter <peter@quantr.hk>
 */
public class SPOSiteDetailPanel extends javax.swing.JPanel {

	String siteTitle;
	String webUrl;
	String rootSiteUrl;

	public SPOSiteDetailPanel(String siteTitle, String rootSiteUrl, String webUrl) {
		this.siteTitle = siteTitle;
		this.rootSiteUrl = rootSiteUrl;
		this.webUrl = webUrl;
		initComponents();

		jTabbedPane1.setTitleAt(0, siteTitle);
		listTable.setDefaultRenderer(Object.class, new MyTableCellRenderer());

		// Add key binding for copy cell value (Cmd+C on Mac, Ctrl+C on Windows/Linux)
		String copyKey = System.getProperty("os.name").toLowerCase().contains("mac") ? "meta C" : "ctrl C";
		listTable.getInputMap().put(javax.swing.KeyStroke.getKeyStroke(copyKey), "copyCell");
		listTable.getActionMap().put("copyCell", new javax.swing.AbstractAction() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent e) {
				int row = listTable.getSelectedRow();
				int col = listTable.getSelectedColumn();
				if (row >= 0 && col >= 0) {
					Object value = listTable.getValueAt(row, col);
					if (value != null) {
						java.awt.datatransfer.StringSelection selection = new java.awt.datatransfer.StringSelection(value.toString());
						java.awt.Toolkit.getDefaultToolkit().getSystemClipboard().setContents(selection, selection);
					}
				}
			}
		});

		SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
			@Override
			protected Void doInBackground() throws Exception {
				refreshButtonActionPerformed(null);
				refreshPermissionButtonActionPerformed(null);
				refreshGroupButtonActionPerformed(null);
				return null;
			}

			@Override
			protected void done() {
			}
		};
		worker.execute();
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form
	 * Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        listPanel = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        refreshButton = new javax.swing.JButton();
        autoWidthButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        filterTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        filterColumnTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        itemButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listTable = new javax.swing.JTable();
        permissionPanel = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        refreshPermissionButton = new javax.swing.JButton();
        filterPermissionTextField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        permissionTable = new javax.swing.JTable();
        groupPanel = new javax.swing.JPanel();
        jToolBar3 = new javax.swing.JToolBar();
        refreshGroupButton = new javax.swing.JButton();
        filterGroupTextField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        groupTable = new javax.swing.JTable();
        permissionGraphPanel = new javax.swing.JPanel();
        jToolBar4 = new javax.swing.JToolBar();
        refreshPermissionGraphButton = new javax.swing.JButton();
        layoutComboBox = new javax.swing.JComboBox<>();
        formatButton = new javax.swing.JButton();
        zoomInButton = new javax.swing.JButton();
        zoom100Button = new javax.swing.JButton();
        zoomOutButton = new javax.swing.JButton();
        jGraphTPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        listPanel.setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);

        refreshButton.setText("Refresh");
        refreshButton.setFocusable(false);
        refreshButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        refreshButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(refreshButton);

        autoWidthButton.setText("Auto Width");
        autoWidthButton.setFocusable(false);
        autoWidthButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        autoWidthButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        autoWidthButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoWidthButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(autoWidthButton);

        jLabel2.setText("filter data");
        jToolBar1.add(jLabel2);

        filterTextField.setMaximumSize(new java.awt.Dimension(200, 23));
        filterTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterTextFieldKeyReleased(evt);
            }
        });
        jToolBar1.add(filterTextField);

        jLabel1.setText("filter column");
        jToolBar1.add(jLabel1);

        filterColumnTextField.setMaximumSize(new java.awt.Dimension(200, 23));
        filterColumnTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterColumnTextFieldKeyReleased(evt);
            }
        });
        jToolBar1.add(filterColumnTextField);

        browseButton.setText("Browse");
        browseButton.setFocusable(false);
        browseButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        browseButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(browseButton);

        itemButton.setText("Item");
        itemButton.setToolTipText("");
        itemButton.setFocusable(false);
        itemButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        itemButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        itemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(itemButton);

        viewButton.setText("View");
        viewButton.setToolTipText("");
        viewButton.setFocusable(false);
        viewButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        viewButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(viewButton);

        copyButton.setText("Copy");
        copyButton.setFocusable(false);
        copyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        copyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(copyButton);

        listPanel.add(jToolBar1, java.awt.BorderLayout.NORTH);

        listTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        listTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        listTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listTable);

        listPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Tab Title", listPanel);

        permissionPanel.setLayout(new java.awt.BorderLayout());

        jToolBar2.setRollover(true);

        refreshPermissionButton.setText("Refresh");
        refreshPermissionButton.setFocusable(false);
        refreshPermissionButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        refreshPermissionButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        refreshPermissionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshPermissionButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(refreshPermissionButton);

        filterPermissionTextField.setMaximumSize(new java.awt.Dimension(200, 23));
        filterPermissionTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterPermissionTextFieldKeyReleased(evt);
            }
        });
        jToolBar2.add(filterPermissionTextField);

        permissionPanel.add(jToolBar2, java.awt.BorderLayout.PAGE_START);

        permissionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        permissionTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane2.setViewportView(permissionTable);

        permissionPanel.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Permission", permissionPanel);

        groupPanel.setLayout(new java.awt.BorderLayout());

        jToolBar3.setRollover(true);

        refreshGroupButton.setText("Refresh");
        refreshGroupButton.setFocusable(false);
        refreshGroupButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        refreshGroupButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        refreshGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshGroupButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(refreshGroupButton);

        filterGroupTextField.setMaximumSize(new java.awt.Dimension(200, 23));
        filterGroupTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterGroupTextFieldKeyReleased(evt);
            }
        });
        jToolBar3.add(filterGroupTextField);

        groupPanel.add(jToolBar3, java.awt.BorderLayout.PAGE_START);

        groupTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        groupTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane3.setViewportView(groupTable);

        groupPanel.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Group", groupPanel);

        permissionGraphPanel.setLayout(new java.awt.BorderLayout());

        jToolBar4.setRollover(true);

        refreshPermissionGraphButton.setText("Refresh");
        refreshPermissionGraphButton.setFocusable(false);
        refreshPermissionGraphButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        refreshPermissionGraphButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        refreshPermissionGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshPermissionGraphButtonActionPerformed(evt);
            }
        });
        jToolBar4.add(refreshPermissionGraphButton);

        layoutComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Compact Tree Layout", "Hierarchical Layout", "Circle Layout", "Edge Label Layout", "Fast Organic Layout", "Organic Layout", "Parallel Edge Layout", "Partition Layout", "Stack Layout" }));
        layoutComboBox.setMaximumSize(new java.awt.Dimension(180, 23));
        jToolBar4.add(layoutComboBox);

        formatButton.setText("Format");
        formatButton.setFocusable(false);
        formatButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        formatButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        formatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatButtonActionPerformed(evt);
            }
        });
        jToolBar4.add(formatButton);

        zoomInButton.setText("+");
        zoomInButton.setFocusable(false);
        zoomInButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomInButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInButtonActionPerformed(evt);
            }
        });
        jToolBar4.add(zoomInButton);

        zoom100Button.setText("100%");
        zoom100Button.setFocusable(false);
        zoom100Button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoom100Button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoom100Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoom100ButtonActionPerformed(evt);
            }
        });
        jToolBar4.add(zoom100Button);

        zoomOutButton.setText("-");
        zoomOutButton.setFocusable(false);
        zoomOutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomOutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutButtonActionPerformed(evt);
            }
        });
        jToolBar4.add(zoomOutButton);

        permissionGraphPanel.add(jToolBar4, java.awt.BorderLayout.PAGE_START);

        jGraphTPanel.setLayout(new java.awt.BorderLayout());
        permissionGraphPanel.add(jGraphTPanel, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Permission Graph", permissionGraphPanel);

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

	private List<Map<String, Object>> originalData = new ArrayList<>();
	private List<String> columnNames = new ArrayList<>();
	private java.util.List<Object[]> permissionTableOriginalData = new java.util.ArrayList<>();
	private java.util.List<org.json.JSONObject> groupTableOriginalData = new java.util.ArrayList<>();

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
		String command = MainFrame.setting.m365Path + " spo list list --webUrl " + webUrl + " --output json";
		System.out.println(command);
		String json = MyLib.run(command);
		try {
			org.json.JSONArray arr = new org.json.JSONArray(json);
			TableModelList model = new TableModelList(arr);
			listTable.setModel(model);
			CommonLib.autoResizeColumnWithHeader(listTable);
			// Store original data and columns for filtering
			originalData.clear();
			columnNames.clear();
			for (int i = 0; i < arr.length(); i++) {
				org.json.JSONObject obj = arr.getJSONObject(i);
				Map<String, Object> row = new HashMap<>();
				Iterator<String> it = obj.keys();
				while (it.hasNext()) {
					String key = it.next();
					row.put(key, obj.get(key));
				}
				originalData.add(row);
			}
			if (arr.length() > 0) {
				Iterator<String> it = arr.getJSONObject(0).keys();
				while (it.hasNext()) {
					String key = it.next();
					if (!columnNames.contains(key)) {
						columnNames.add(key);
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void filterTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterTextFieldKeyReleased
		String filter = filterTextField.getText().toLowerCase().trim();
		System.out.println(filter);
		if (filter.isEmpty()) {
			// Show all
			org.json.JSONArray arr = new org.json.JSONArray();
			for (Map<String, Object> row : originalData) {
				arr.put(new org.json.JSONObject(row));
			}
			listTable.setModel(new TableModelList(arr));
			CommonLib.autoResizeColumnWithHeader(listTable);
			return;
		}
		org.json.JSONArray filteredArr = new org.json.JSONArray();
		for (Map<String, Object> row : originalData) {
			for (String key : columnNames) {
				Object value = row.get(key);
				if (value != null && value.toString().toLowerCase().contains(filter)) {
					filteredArr.put(new org.json.JSONObject(row));
					break;
				}
			}
		}
		listTable.setModel(new TableModelList(filteredArr));
		CommonLib.autoResizeColumnWithHeader(listTable);
    }//GEN-LAST:event_filterTextFieldKeyReleased

    private void filterColumnTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterColumnTextFieldKeyReleased
		String filter = filterColumnTextField.getText().toLowerCase().trim();
		if (filter.isEmpty()) {
			// Show all columns
			org.json.JSONArray arr = new org.json.JSONArray();
			for (Map<String, Object> row : originalData) {
				arr.put(new org.json.JSONObject(row));
			}
			listTable.setModel(new TableModelList(arr));
			CommonLib.autoResizeColumnWithHeader(listTable);
			return;
		}
		// Find columns whose name contains the filter
		List<String> filteredColumns = new ArrayList<>();
		for (String col : columnNames) {
			if (col.toLowerCase().contains(filter)) {
				filteredColumns.add(col);
			}
		}
		// If no columns match, show nothing
		if (filteredColumns.isEmpty()) {
			listTable.setModel(new javax.swing.table.DefaultTableModel());
			return;
		}
		// Build a new TableModelList with only the filtered columns
		org.json.JSONArray arr = new org.json.JSONArray();
		for (Map<String, Object> row : originalData) {
			org.json.JSONObject obj = new org.json.JSONObject();
			for (String col : filteredColumns) {
				if (row.containsKey(col)) {
					obj.put(col, row.get(col));
				}
			}
			arr.put(obj);
		}
		listTable.setModel(new TableModelList(arr, filteredColumns));
		CommonLib.autoResizeColumnWithHeader(listTable);
	}//GEN-LAST:event_filterColumnTextFieldKeyReleased

    private void autoWidthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoWidthButtonActionPerformed
		CommonLib.autoResizeColumnWithHeader(listTable);
    }//GEN-LAST:event_autoWidthButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
		try {
			// get column "RootFolder"
			int columnIndex = listTable.getColumnModel().getColumnIndex("RootFolder");
			if (columnIndex < 0) {
				System.out.println("Column 'RootFolder' not found");
				return;
			}
			// Get the selected row
			int selectedRow = listTable.getSelectedRow();
			if (selectedRow < 0) {
				System.out.println("No row selected");
				return;
			}
			// Get the value of the "RootFolder" column
			Object value = listTable.getValueAt(selectedRow, columnIndex);
			if (value == null) {
				System.out.println("No value found in 'RootFolder' column");
				return;
			}
			String rootFolderUrl = value.toString();
			org.json.JSONObject jsonObject = new org.json.JSONObject(rootFolderUrl);
			String serverRelativeUrl = jsonObject.getString("ServerRelativeUrl");
			// open browser with the URL
			String fullUrl = rootSiteUrl + serverRelativeUrl;
			fullUrl = fullUrl.replaceAll(" ", "%20");
			//encode fullUrl
			try {
				System.out.println("Opening URL: " + fullUrl);
				java.awt.Desktop.getDesktop().browse(URI.create(fullUrl));
			} catch (Exception e) {
				e.printStackTrace();
				System.out.println("Failed to open URL in browser: " + e.getMessage());
			}
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
			System.out.println("Failed to open URL in browser: " + e.getMessage());
		}
    }//GEN-LAST:event_browseButtonActionPerformed

    private void listTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listTableMouseClicked
		if (evt.getClickCount() == 2) {
			browseButtonActionPerformed(null);
		}
    }//GEN-LAST:event_listTableMouseClicked

    private void itemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemButtonActionPerformed
		try {
			int columnIndex = listTable.getColumnModel().getColumnIndex("Title");
			if (columnIndex < 0) {
				System.out.println("Column 'Title' not found");
				return;
			}
			int selectedRow = listTable.getSelectedRow();
			if (selectedRow < 0) {
				System.out.println("No row selected");
				return;
			}
			Object listTitle = listTable.getValueAt(selectedRow, columnIndex);

			columnIndex = listTable.getColumnModel().getColumnIndex("Id");
			if (columnIndex < 0) {
				System.out.println("Column 'Id' not found");
				return;
			}
			Object listId = listTable.getValueAt(selectedRow, columnIndex);

			SPOListItemPanel spoListItemPanel = new SPOListItemPanel(rootSiteUrl, webUrl, listTitle.toString(), listId.toString());
			jTabbedPane1.addTab(listTitle.toString() + " - Item", spoListItemPanel);
			jTabbedPane1.setSelectedComponent(spoListItemPanel);

		} catch (IllegalArgumentException e) {
			e.printStackTrace();
			System.out.println("Failed to open URL in browser: " + e.getMessage());
		}
    }//GEN-LAST:event_itemButtonActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
		try {
			int columnIndex = listTable.getColumnModel().getColumnIndex("Title");
			if (columnIndex < 0) {
				System.out.println("Column 'Title' not found");
				return;
			}
			int selectedRow = listTable.getSelectedRow();
			if (selectedRow < 0) {
				System.out.println("No row selected");
				return;
			}
			Object listTitle = listTable.getValueAt(selectedRow, columnIndex);

			columnIndex = listTable.getColumnModel().getColumnIndex("Id");
			if (columnIndex < 0) {
				System.out.println("Column 'Id' not found");
				return;
			}
			Object listId = listTable.getValueAt(selectedRow, columnIndex);

			SPOListViewPanel spoListItemPanel = new SPOListViewPanel(rootSiteUrl, webUrl, listTitle.toString(), listId.toString());
			jTabbedPane1.addTab(listTitle.toString() + " - View", spoListItemPanel);
			jTabbedPane1.setSelectedComponent(spoListItemPanel);

		} catch (IllegalArgumentException e) {
			e.printStackTrace();
			System.out.println("Failed to open URL in browser: " + e.getMessage());
		}
    }//GEN-LAST:event_viewButtonActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
		// TODO add your handling code here:
    }//GEN-LAST:event_copyButtonActionPerformed

    private void refreshPermissionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshPermissionButtonActionPerformed
		String command = MainFrame.setting.m365Path + " spo web get --url " + webUrl + " --output json";
		System.out.println(command);
		String json = MyLib.run(command);
		org.json.JSONObject obj = new org.json.JSONObject(json);
		// Build a 2-column table: key, value
		java.util.List<String> keys = new java.util.ArrayList<>(obj.keySet());
		Object[][] data = new Object[keys.size()][2];
		permissionTableOriginalData.clear();
		for (int i = 0; i < keys.size(); i++) {
			String key = keys.get(i);
			Object value = obj.get(key);
			Object[] row = new Object[]{key, (value instanceof org.json.JSONObject || value instanceof org.json.JSONArray) ? value.toString() : value};
			data[i][0] = row[0];
			data[i][1] = row[1];
			permissionTableOriginalData.add(row);
		}
		javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel(data, new String[]{"Key", "Value"}){
				@Override
				public boolean isCellEditable(int row, int column) {
					return false;
				}
			};
		permissionTable.setModel(model);
		CommonLib.autoResizeColumnWithHeader(permissionTable);
    }//GEN-LAST:event_refreshPermissionButtonActionPerformed

    private void filterPermissionTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterPermissionTextFieldKeyReleased
		String filter = filterPermissionTextField.getText().toLowerCase().trim();
		if (filter.isEmpty()) {
			// Show all
			Object[][] data = new Object[permissionTableOriginalData.size()][2];
			for (int i = 0; i < permissionTableOriginalData.size(); i++) {
				data[i][0] = permissionTableOriginalData.get(i)[0];
				data[i][1] = permissionTableOriginalData.get(i)[1];
			}
			javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel(data, new String[]{"Key", "Value"}){
				@Override
				public boolean isCellEditable(int row, int column) {
					return false;
				}
			};
			permissionTable.setModel(model);
			CommonLib.autoResizeColumnWithHeader(permissionTable);
			return;
		}
		java.util.List<Object[]> filtered = new java.util.ArrayList<>();
		for (Object[] row : permissionTableOriginalData) {
			if (row[0].toString().toLowerCase().contains(filter) || (row[1] != null && row[1].toString().toLowerCase().contains(filter))) {
				filtered.add(row);
			}
		}
		Object[][] data = new Object[filtered.size()][2];
		for (int i = 0; i < filtered.size(); i++) {
			data[i][0] = filtered.get(i)[0];
			data[i][1] = filtered.get(i)[1];
		}
		javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel(data, new String[]{"Key", "Value"}){
				@Override
				public boolean isCellEditable(int row, int column) {
					return false;
				}
			};
		permissionTable.setModel(model);
		CommonLib.autoResizeColumnWithHeader(permissionTable);
    }//GEN-LAST:event_filterPermissionTextFieldKeyReleased

    private void refreshGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshGroupButtonActionPerformed
		String command = MainFrame.setting.m365Path + " spo group list --webUrl " + webUrl + " --output json";
		System.out.println(command);
		String json = MyLib.run(command);
		try {
			org.json.JSONArray arr = new org.json.JSONArray(json);
			groupTableOriginalData.clear();
			String[] columns;
			if (arr.length() > 0) {
				org.json.JSONObject first = arr.getJSONObject(0);
				java.util.List<String> colList = new java.util.ArrayList<>(first.keySet());
				columns = colList.toArray(new String[0]);
			} else {
				columns = new String[]{};
			}
			Object[][] data = new Object[arr.length()][columns.length];
			for (int i = 0; i < arr.length(); i++) {
				org.json.JSONObject obj = arr.getJSONObject(i);
				groupTableOriginalData.add(obj);
				for (int j = 0; j < columns.length; j++) {
					Object value = obj.opt(columns[j]);
					data[i][j] = (value instanceof org.json.JSONObject || value instanceof org.json.JSONArray) ? value.toString() : value;
				}
			}
			javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel(data, columns) {
				@Override
				public boolean isCellEditable(int row, int column) {
					return false;
				}
			};
			groupTable.setModel(model);
			CommonLib.autoResizeColumnWithHeader(groupTable);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
    }//GEN-LAST:event_refreshGroupButtonActionPerformed

    private void filterGroupTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterGroupTextFieldKeyReleased
		String filter = filterGroupTextField.getText().trim().toLowerCase();
		if (groupTableOriginalData.isEmpty()) {
			return;
		}
		javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) groupTable.getModel();
		if (filter.isEmpty()) {
			// Restore all rows
			model.setRowCount(0);
			for (org.json.JSONObject obj : groupTableOriginalData) {
				Object[] row = new Object[model.getColumnCount()];
				for (int j = 0; j < model.getColumnCount(); j++) {
					Object value = obj.opt(model.getColumnName(j));
					row[j] = (value instanceof org.json.JSONObject || value instanceof org.json.JSONArray) ? value.toString() : value;
				}
				model.addRow(row);
			}
		} else {
			model.setRowCount(0);
			for (org.json.JSONObject obj : groupTableOriginalData) {
				boolean match = false;
				for (String key : obj.keySet()) {
					Object value = obj.opt(key);
					if (value != null && value.toString().toLowerCase().contains(filter)) {
						match = true;
						break;
					}
				}
				if (match) {
					Object[] row = new Object[model.getColumnCount()];
					for (int j = 0; j < model.getColumnCount(); j++) {
						Object value = obj.opt(model.getColumnName(j));
						row[j] = (value instanceof org.json.JSONObject || value instanceof org.json.JSONArray) ? value.toString() : value;
					}
					model.addRow(row);
				}
			}
		}
		CommonLib.autoResizeColumnWithHeader(groupTable);
    }//GEN-LAST:event_filterGroupTextFieldKeyReleased

    private void refreshPermissionGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshPermissionGraphButtonActionPerformed
		// Sample graph using JGraphX
		jGraphTPanel.removeAll();
		com.mxgraph.view.mxGraph mxGraph = new com.mxgraph.view.mxGraph();
		Object parent = mxGraph.getDefaultParent();
		mxGraph.setAutoSizeCells(true);
		mxGraph.getModel().beginUpdate();
		try {
			Object site = mxGraph.insertVertex(parent, null, siteTitle, 100, 100, 60, 40);
			// spo group list --webUrl
			String command = MainFrame.setting.m365Path + " spo group list --webUrl " + webUrl + " --output json";
			System.out.println(command);
			String json = MyLib.run(command);
			org.json.JSONArray arr = new org.json.JSONArray(json);
			for (int i = 0; i < arr.length(); i++) {
				org.json.JSONObject group = arr.getJSONObject(i);
				String groupName = group.getString("Title");
				int groupId = group.getInt("Id");
				System.out.println(">>> " + groupName);

				String style = "shape=rectangle;rounded=1;fillColor=yellow;strokeColor=black;strokeWidth=1;";
				Object groupVertex = mxGraph.insertVertex(parent, null, groupName, Math.random() * 400, Math.random() * 400, 80, 30);
//				mxGraph.updateCellSize(groupVertex);

				mxGraph.insertEdge(parent, null, null, site, groupVertex);

				addGroupMemberToChart(mxGraph, parent, groupVertex, groupId, groupName);
			}
		} finally {
			mxGraph.getModel().endUpdate();
		}
		MyGraphComponent graphComponent = new MyGraphComponent(mxGraph);
		graphComponent.setConnectable(false);
		graphComponent.getGraph().setAllowDanglingEdges(false);
		graphComponent.getGraph().setCellsDisconnectable(false);
		graphComponent.getGraph().setCellsEditable(false);
		graphComponent.getGraph().setCellsMovable(true);
		graphComponent.getGraph().setCellsResizable(false);
		jGraphTPanel.setLayout(new java.awt.BorderLayout());
		jGraphTPanel.add(graphComponent, java.awt.BorderLayout.CENTER);
		jGraphTPanel.revalidate();
		jGraphTPanel.repaint();
	}//GEN-LAST:event_refreshPermissionGraphButtonActionPerformed

    private void formatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatButtonActionPerformed
		String selectedLayout = (String) layoutComboBox.getSelectedItem();
		if (selectedLayout == null || jGraphTPanel.getComponentCount() == 0) {
			return;
		}
		com.mxgraph.view.mxGraph mxGraph = ((com.mxgraph.swing.mxGraphComponent) jGraphTPanel.getComponent(0)).getGraph();
		mxGraph.getModel().beginUpdate();
		try {
			if (selectedLayout.equals("Hierarchical Layout")) {
				com.mxgraph.layout.hierarchical.mxHierarchicalLayout layout = new com.mxgraph.layout.hierarchical.mxHierarchicalLayout(mxGraph);
				layout.execute(mxGraph.getDefaultParent());
			} else if (selectedLayout.equals("Circle Layout")) {
				com.mxgraph.layout.mxCircleLayout layout = new com.mxgraph.layout.mxCircleLayout(mxGraph);
				layout.setRadius(200);
				layout.execute(mxGraph.getDefaultParent());
			} else if (selectedLayout.equals("Compact Tree Layout")) {
				com.mxgraph.layout.mxCompactTreeLayout layout = new com.mxgraph.layout.mxCompactTreeLayout(mxGraph);
				layout.setLevelDistance(50);
				layout.execute(mxGraph.getDefaultParent());
			} else if (selectedLayout.equals("Edge Label Layout")) {
				com.mxgraph.layout.mxEdgeLabelLayout layout = new com.mxgraph.layout.mxEdgeLabelLayout(mxGraph);
				layout.execute(mxGraph.getDefaultParent());
			} else if (selectedLayout.equals("Fast Organic Layout")) {
				com.mxgraph.layout.mxFastOrganicLayout layout = new com.mxgraph.layout.mxFastOrganicLayout(mxGraph);
				layout.setForceConstant(100);
				layout.execute(mxGraph.getDefaultParent());
			} else if (selectedLayout.equals("Organic Layout")) {
				com.mxgraph.layout.mxOrganicLayout layout = new com.mxgraph.layout.mxOrganicLayout(mxGraph);
				layout.execute(mxGraph.getDefaultParent());
			} else if (selectedLayout.equals("Parallel Edge Layout")) {
				com.mxgraph.layout.mxParallelEdgeLayout layout = new com.mxgraph.layout.mxParallelEdgeLayout(mxGraph);
				layout.execute(mxGraph.getDefaultParent());
			} else if (selectedLayout.equals("Partition Layout")) {
				com.mxgraph.layout.mxPartitionLayout layout = new com.mxgraph.layout.mxPartitionLayout(mxGraph);
				layout.execute(mxGraph.getDefaultParent());
			} else if (selectedLayout.equals("Stack Layout")) {
				com.mxgraph.layout.mxStackLayout layout = new com.mxgraph.layout.mxStackLayout(mxGraph);
				layout.execute(mxGraph.getDefaultParent());
			}
		} finally {
			mxGraph.getModel().endUpdate();
		}
		// Refresh the graph component to apply the layout changes
		com.mxgraph.swing.mxGraphComponent graphComponent = (com.mxgraph.swing.mxGraphComponent) jGraphTPanel.getComponent(0);
		graphComponent.refresh();
		graphComponent.revalidate();
		graphComponent.repaint();
    }//GEN-LAST:event_formatButtonActionPerformed

    private void zoomInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInButtonActionPerformed
		if (jGraphTPanel.getComponentCount() > 0 && jGraphTPanel.getComponent(0) instanceof com.mxgraph.swing.mxGraphComponent) {
			com.mxgraph.swing.mxGraphComponent graphComponent = (com.mxgraph.swing.mxGraphComponent) jGraphTPanel.getComponent(0);
			graphComponent.zoomIn();
		}
	}//GEN-LAST:event_zoomInButtonActionPerformed

	private void zoom100ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoom100ButtonActionPerformed
		if (jGraphTPanel.getComponentCount() > 0 && jGraphTPanel.getComponent(0) instanceof com.mxgraph.swing.mxGraphComponent) {
			com.mxgraph.swing.mxGraphComponent graphComponent = (com.mxgraph.swing.mxGraphComponent) jGraphTPanel.getComponent(0);
			graphComponent.zoomActual();
		}
	}//GEN-LAST:event_zoom100ButtonActionPerformed

	private void zoomOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutButtonActionPerformed
		if (jGraphTPanel.getComponentCount() > 0 && jGraphTPanel.getComponent(0) instanceof com.mxgraph.swing.mxGraphComponent) {
			com.mxgraph.swing.mxGraphComponent graphComponent = (com.mxgraph.swing.mxGraphComponent) jGraphTPanel.getComponent(0);
			graphComponent.zoomOut();
		}
	}//GEN-LAST:event_zoomOutButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton autoWidthButton;
    private javax.swing.JButton browseButton;
    private javax.swing.JButton copyButton;
    private javax.swing.JTextField filterColumnTextField;
    private javax.swing.JTextField filterGroupTextField;
    private javax.swing.JTextField filterPermissionTextField;
    private javax.swing.JTextField filterTextField;
    private javax.swing.JButton formatButton;
    private javax.swing.JPanel groupPanel;
    private javax.swing.JTable groupTable;
    private javax.swing.JButton itemButton;
    private javax.swing.JPanel jGraphTPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JToolBar jToolBar4;
    private javax.swing.JComboBox<String> layoutComboBox;
    private javax.swing.JPanel listPanel;
    private javax.swing.JTable listTable;
    private javax.swing.JPanel permissionGraphPanel;
    private javax.swing.JPanel permissionPanel;
    private javax.swing.JTable permissionTable;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton refreshGroupButton;
    private javax.swing.JButton refreshPermissionButton;
    private javax.swing.JButton refreshPermissionGraphButton;
    private javax.swing.JButton viewButton;
    private javax.swing.JButton zoom100Button;
    private javax.swing.JButton zoomInButton;
    private javax.swing.JButton zoomOutButton;
    // End of variables declaration//GEN-END:variables

	private void addGroupMemberToChart(mxGraph mxGraph, Object parent, Object parentVertex, int groupId, String groupName) {
		String command = MainFrame.setting.m365Path + " spo group member list --webUrl " + webUrl + " --groupId " + groupId + " --output json";
		System.out.println(command);
		String json = MyLib.run(command);
		org.json.JSONArray arr = new org.json.JSONArray(json);
		for (int i = 0; i < arr.length(); i++) {
			org.json.JSONObject member = arr.getJSONObject(i);
			String memberName = member.getString("Title");
			System.out.println(">>> " + groupName + " <- " + memberName);
			// Insert member vertex with a visible box style
			String style = "shape=rectangle;rounded=1;fillColor=yellow;strokeColor=black;strokeWidth=1;";
			Object memberVertex = mxGraph.insertVertex(parent, null, memberName, Math.random() * 400, Math.random() * 400, 80, 30);
//			mxGraph.updateCellSize(memberVertex);
			mxGraph.insertEdge(parent, null, null, parentVertex, memberVertex);
		}
	}

}

package org.hkprog.m365gui.spoPanel;

import hk.quantr.javalib.CommonLib;
import java.net.URI;
import org.hkprog.m365gui.MainFrame;
import org.hkprog.m365gui.MyLib;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 *
 * @author Peter <peter@quantr.hk>
 */
public class SPOSiteDetailPanel extends javax.swing.JPanel {

	String webUrl;
	String rootSiteUrl;

	public SPOSiteDetailPanel(String rootSiteUrl, String webUrl) {
		this.rootSiteUrl = rootSiteUrl;
		this.webUrl = webUrl;
		initComponents();

		listTable.setDefaultRenderer(Object.class, new MyTableCellRenderer());

		// Add key binding for copy cell value (Cmd+C on Mac, Ctrl+C on Windows/Linux)
		String copyKey = System.getProperty("os.name").toLowerCase().contains("mac") ? "meta C" : "ctrl C";
		listTable.getInputMap().put(javax.swing.KeyStroke.getKeyStroke(copyKey), "copyCell");
		listTable.getActionMap().put("copyCell", new javax.swing.AbstractAction() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent e) {
				int row = listTable.getSelectedRow();
				int col = listTable.getSelectedColumn();
				if (row >= 0 && col >= 0) {
					Object value = listTable.getValueAt(row, col);
					if (value != null) {
						java.awt.datatransfer.StringSelection selection = new java.awt.datatransfer.StringSelection(value.toString());
						java.awt.Toolkit.getDefaultToolkit().getSystemClipboard().setContents(selection, selection);
					}
				}
			}
		});

		refreshButtonActionPerformed(null);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form
	 * Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        listPanel = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        refreshButton = new javax.swing.JButton();
        autoWidthButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        filterTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        filterColumnTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        itemButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listTable = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        listPanel.setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);

        refreshButton.setText("Refresh");
        refreshButton.setFocusable(false);
        refreshButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        refreshButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(refreshButton);

        autoWidthButton.setText("Auto Width");
        autoWidthButton.setFocusable(false);
        autoWidthButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        autoWidthButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        autoWidthButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoWidthButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(autoWidthButton);

        jLabel2.setText("filter data");
        jToolBar1.add(jLabel2);

        filterTextField.setMaximumSize(new java.awt.Dimension(200, 23));
        filterTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterTextFieldKeyReleased(evt);
            }
        });
        jToolBar1.add(filterTextField);

        jLabel1.setText("filter column");
        jToolBar1.add(jLabel1);

        filterColumnTextField.setMaximumSize(new java.awt.Dimension(200, 23));
        filterColumnTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterColumnTextFieldKeyReleased(evt);
            }
        });
        jToolBar1.add(filterColumnTextField);

        browseButton.setText("Browse");
        browseButton.setFocusable(false);
        browseButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        browseButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(browseButton);

        itemButton.setText("Item");
        itemButton.setToolTipText("");
        itemButton.setFocusable(false);
        itemButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        itemButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        itemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(itemButton);

        listPanel.add(jToolBar1, java.awt.BorderLayout.NORTH);

        listTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        listTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        listTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listTable);

        listPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("List", listPanel);

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

	private List<Map<String, Object>> originalData = new ArrayList<>();
	private List<String> columnNames = new ArrayList<>();

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
		String json = MyLib.run(MainFrame.setting.m365Path + " spo list list --webUrl " + webUrl + " --output json");
		System.out.println(MainFrame.setting.m365Path + " spo list list --webUrl " + webUrl + " --output json");
		try {
			org.json.JSONArray arr = new org.json.JSONArray(json);
			TableModelList model = new TableModelList(arr);
			listTable.setModel(model);
			CommonLib.autoResizeColumnWithHeader(listTable);
			// Store original data and columns for filtering
			originalData.clear();
			columnNames.clear();
			for (int i = 0; i < arr.length(); i++) {
				org.json.JSONObject obj = arr.getJSONObject(i);
				Map<String, Object> row = new HashMap<>();
				Iterator<String> it = obj.keys();
				while (it.hasNext()) {
					String key = it.next();
					row.put(key, obj.get(key));
				}
				originalData.add(row);
			}
			if (arr.length() > 0) {
				Iterator<String> it = arr.getJSONObject(0).keys();
				while (it.hasNext()) {
					String key = it.next();
					if (!columnNames.contains(key)) {
						columnNames.add(key);
					}
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void filterTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterTextFieldKeyReleased
		String filter = filterTextField.getText().toLowerCase().trim();
		System.out.println(filter);
		if (filter.isEmpty()) {
			// Show all
			org.json.JSONArray arr = new org.json.JSONArray();
			for (Map<String, Object> row : originalData) {
				arr.put(new org.json.JSONObject(row));
			}
			listTable.setModel(new TableModelList(arr));
			CommonLib.autoResizeColumnWithHeader(listTable);
			return;
		}
		org.json.JSONArray filteredArr = new org.json.JSONArray();
		for (Map<String, Object> row : originalData) {
			for (String key : columnNames) {
				Object value = row.get(key);
				if (value != null && value.toString().toLowerCase().contains(filter)) {
					filteredArr.put(new org.json.JSONObject(row));
					break;
				}
			}
		}
		listTable.setModel(new TableModelList(filteredArr));
		CommonLib.autoResizeColumnWithHeader(listTable);
    }//GEN-LAST:event_filterTextFieldKeyReleased

    private void filterColumnTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterColumnTextFieldKeyReleased
		String filter = filterColumnTextField.getText().toLowerCase().trim();
		if (filter.isEmpty()) {
			// Show all columns
			org.json.JSONArray arr = new org.json.JSONArray();
			for (Map<String, Object> row : originalData) {
				arr.put(new org.json.JSONObject(row));
			}
			listTable.setModel(new TableModelList(arr));
			CommonLib.autoResizeColumnWithHeader(listTable);
			return;
		}
		// Find columns whose name contains the filter
		List<String> filteredColumns = new ArrayList<>();
		for (String col : columnNames) {
			if (col.toLowerCase().contains(filter)) {
				filteredColumns.add(col);
			}
		}
		// If no columns match, show nothing
		if (filteredColumns.isEmpty()) {
			listTable.setModel(new javax.swing.table.DefaultTableModel());
			return;
		}
		// Build a new TableModelList with only the filtered columns
		org.json.JSONArray arr = new org.json.JSONArray();
		for (Map<String, Object> row : originalData) {
			org.json.JSONObject obj = new org.json.JSONObject();
			for (String col : filteredColumns) {
				if (row.containsKey(col)) {
					obj.put(col, row.get(col));
				}
			}
			arr.put(obj);
		}
		listTable.setModel(new TableModelList(arr, filteredColumns));
		CommonLib.autoResizeColumnWithHeader(listTable);
	}//GEN-LAST:event_filterColumnTextFieldKeyReleased

    private void autoWidthButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoWidthButtonActionPerformed
		CommonLib.autoResizeColumnWithHeader(listTable);
    }//GEN-LAST:event_autoWidthButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
		try {
			// get column "RootFolder"
			int columnIndex = listTable.getColumnModel().getColumnIndex("RootFolder");
			if (columnIndex < 0) {
				System.out.println("Column 'RootFolder' not found");
				return;
			}
			// Get the selected row
			int selectedRow = listTable.getSelectedRow();
			if (selectedRow < 0) {
				System.out.println("No row selected");
				return;
			}
			// Get the value of the "RootFolder" column
			Object value = listTable.getValueAt(selectedRow, columnIndex);
			if (value == null) {
				System.out.println("No value found in 'RootFolder' column");
				return;
			}
			String rootFolderUrl = value.toString();
			org.json.JSONObject jsonObject = new org.json.JSONObject(rootFolderUrl);
			String serverRelativeUrl = jsonObject.getString("ServerRelativeUrl");
			// open browser with the URL
			String fullUrl = rootSiteUrl + serverRelativeUrl;
			fullUrl = fullUrl.replaceAll(" ", "%20");
			//encode fullUrl
			try {
				System.out.println("Opening URL: " + fullUrl);
				java.awt.Desktop.getDesktop().browse(URI.create(fullUrl));
			} catch (Exception e) {
				e.printStackTrace();
				System.out.println("Failed to open URL in browser: " + e.getMessage());
			}
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
			System.out.println("Failed to open URL in browser: " + e.getMessage());
		}
    }//GEN-LAST:event_browseButtonActionPerformed

    private void listTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listTableMouseClicked
		if (evt.getClickCount() == 2) {
			browseButtonActionPerformed(null);
		}
    }//GEN-LAST:event_listTableMouseClicked

    private void itemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemButtonActionPerformed
		try {
			int columnIndex = listTable.getColumnModel().getColumnIndex("Title");
			if (columnIndex < 0) {
				System.out.println("Column 'Title' not found");
				return;
			}
			int selectedRow = listTable.getSelectedRow();
			if (selectedRow < 0) {
				System.out.println("No row selected");
				return;
			}
			Object listTitle = listTable.getValueAt(selectedRow, columnIndex);
			if (listTitle == null) {
				System.out.println("No value found in 'Title' column");
				return;
			}
			
			
			
			 columnIndex = listTable.getColumnModel().getColumnIndex("Id");
			if (columnIndex < 0) {
				System.out.println("Column 'Id' not found");
				return;
			}
			Object listId = listTable.getValueAt(selectedRow, columnIndex);
			if (listTitle == null) {
				System.out.println("No value found in 'Title' column");
				return;
			}
			
			

			SPOListItemPanel spoListItemPanel = new SPOListItemPanel(rootSiteUrl, webUrl, listTitle.toString(), listId.toString());
			jTabbedPane1.addTab("Item", spoListItemPanel);
			jTabbedPane1.setSelectedComponent(spoListItemPanel);

		} catch (IllegalArgumentException e) {
			e.printStackTrace();
			System.out.println("Failed to open URL in browser: " + e.getMessage());
		}
    }//GEN-LAST:event_itemButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton autoWidthButton;
    private javax.swing.JButton browseButton;
    private javax.swing.JTextField filterColumnTextField;
    private javax.swing.JTextField filterTextField;
    private javax.swing.JButton itemButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel listPanel;
    private javax.swing.JTable listTable;
    private javax.swing.JButton refreshButton;
    // End of variables declaration//GEN-END:variables

}
